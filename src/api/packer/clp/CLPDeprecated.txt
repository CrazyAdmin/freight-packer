
class candidate_data{
    constructor(){
        this.mandatory = 0;
        this.net_profit = 0;
        this.total_volume = 0;
        this.item_type_to_be_added = 0;
    }
}



/**
 * 
 * @param {solution_data} solution 
 */
/*function ReadSolution(solution){
       
    //Application.ScreenUpdating = false
    //Application.Calculation = xlCalculationManual
            
    var i = 0;
    var j = 0;
    var k = 0;
    var l = 0;

    var container_index = 0;
    var item_type_index = 0;

    var offset = 0;
    
    offset = 0
    container_index = 1
    
    //With solution
    
    for( i = 1; i <= container_list.num_container_types; i++){
        for( j = 1; j <= container_list.container_typesGet(i).number_available; j++){                
            if( container_list.container_typesGet(i).mandatory >= 0 ){
                //With .containerGet(container_index)
                let container = solution.containerGet(container_index);
                
                l = Cells(4, offset + 7).Value;
                
                for( k = 1; k<=l; k++){
                    if( isNaN(Cells(5 + k, offset + 7).Value) === false ){
                    
                       solution.item_cnt =solution.item_cnt + 1;
                        
                        item_type_index = Cells(5 + k, offset + 7).Value;
                        
                        solution.unpacked_item_count[item_type_index] = solution.unpacked_item_countGet(item_type_index) - 1;
                        
                        container.itemsGet(container.item_cnt).item_type = item_type_index;
                        container.itemsGet(container.item_cnt).origin_x = Cells(5 + k, offset + 3).Value;
                        container.itemsGet(container.item_cnt).origin_y = Cells(5 + k, offset + 4).Value;
                        container.itemsGet(container.item_cnt).origin_z = Cells(5 + k, offset + 5).Value;
                        
                        if( ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value === "xyz" ){
                            container.itemsGet(container.item_cnt).rotation = 1;
                            container.itemsGet(container.item_cnt).opposite_x = container.itemsGet(container.item_cnt).origin_x + item_list.item_typesGet(item_type_index).width;
                            container.itemsGet(container.item_cnt).opposite_y = container.itemsGet(container.item_cnt).origin_y + item_list.item_typesGet(item_type_index).height;
                            container.itemsGet(container.item_cnt).opposite_z = container.itemsGet(container.item_cnt).origin_z + item_list.item_typesGet(item_type_index).length;
                        } else if ( ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value === "zyx" ){
                            container.itemsGet(container.item_cnt).rotation = 2;
                            container.itemsGet(container.item_cnt).opposite_x = container.itemsGet(container.item_cnt).origin_x + item_list.item_typesGet(item_type_index).length;
                            container.itemsGet(container.item_cnt).opposite_y = container.itemsGet(container.item_cnt).origin_y + item_list.item_typesGet(item_type_index).height;
                            container.itemsGet(container.item_cnt).opposite_z = container.itemsGet(container.item_cnt).origin_z + item_list.item_typesGet(item_type_index).width;
                        } else if ( ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value === "xzy" ){
                            container.itemsGet(container.item_cnt).rotation = 3;
                            container.itemsGet(container.item_cnt).opposite_x = container.itemsGet(container.item_cnt).origin_x + item_list.item_typesGet(item_type_index).width;
                            container.itemsGet(container.item_cnt).opposite_y = container.itemsGet(container.item_cnt).origin_y + item_list.item_typesGet(item_type_index).length;
                            container.itemsGet(container.item_cnt).opposite_z = container.itemsGet(container.item_cnt).origin_z + item_list.item_typesGet(item_type_index).height;
                        } else if ( ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value === "yzx" ){
                            container.itemsGet(container.item_cnt).rotation = 4;
                            container.itemsGet(container.item_cnt).opposite_x = container.itemsGet(container.item_cnt).origin_x + item_list.item_typesGet(item_type_index).height;
                            container.itemsGet(container.item_cnt).opposite_y = container.itemsGet(container.item_cnt).origin_y + item_list.item_typesGet(item_type_index).length;
                            container.itemsGet(container.item_cnt).opposite_z = container.itemsGet(container.item_cnt).origin_z + item_list.item_typesGet(item_type_index).width;
                        } else if ( ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value === "yxz" ){
                            container.itemsGet(container.item_cnt).rotation = 5;
                            container.itemsGet(container.item_cnt).opposite_x = container.itemsGet(container.item_cnt).origin_x + item_list.item_typesGet(item_type_index).height;
                            container.itemsGet(container.item_cnt).opposite_y = container.itemsGet(container.item_cnt).origin_y + item_list.item_typesGet(item_type_index).width;
                            container.itemsGet(container.item_cnt).opposite_z = container.itemsGet(container.item_cnt).origin_z + item_list.item_typesGet(item_type_index).length;
                        } else if ( ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 6).Value === "zxy" ){
                            container.itemsGet(container.item_cnt).rotation = 6;
                            container.itemsGet(container.item_cnt).opposite_x = container.itemsGet(container.item_cnt).origin_x + item_list.item_typesGet(item_type_index).length;
                            container.itemsGet(container.item_cnt).opposite_y = container.itemsGet(container.item_cnt).origin_y + item_list.item_typesGet(item_type_index).width;
                            container.itemsGet(container.item_cnt).opposite_z = container.itemsGet(container.item_cnt).origin_z + item_list.item_typesGet(item_type_index).height;
                        }
                
                       solution.volume_packed =solution.volume_packed + item_list.item_typesGet(item_type_index).volume;
                       solution.weight_packed =solution.weight_packed + item_list.item_typesGet(item_type_index).weight;
                        
                        if(solution.item_cnt === 1 ){
                            solution.net_profit = solution.net_profit + item_list.item_typesGet(item_type_index).profit -solution.cost;
                        } else {
                            solution.net_profit = solution.net_profit + item_list.item_typesGet(item_type_index).profit;
                        }
                        
                    }
                }     
                
                container_index = container_index + 1;
            }
            
            offset = offset + 11;
        }
    }
    
    //Application.ScreenUpdating = true
    //Application.Calculation = xlCalculationAutomatic
    
}
*/


/*
function FeasibilityCheckDataAndSolution(){
    
    //Application.ScreenUpdating = false
    //Application.Calculation = xlCalculationManual
    
    var WorksheetExists = false;
    var reply = 0;
    
    WorksheetExists = CheckWorksheetExistence("1.Items") && CheckWorksheetExistence("2.Containers") && CheckWorksheetExistence("3.Solution");
    if( WorksheetExists === false ){
        alert("Worksheets 1.Items, 2.Containers, and 3.Solution must exist for the Feasibility Check.");
        return;
    }
    
    GetItemData();
    GetContainerData();
    GetInstanceData();
    GetCompatibilityData();

    ThisWorkbook.Worksheets("3.Solution").Activate;
    
    Range(Cells(2, 1), Cells(2, 11)).Clear;
    Range(ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 9, 1), ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + (4 * item_list.total_number_of_items), 1)).Clear;
    
    var infeasibility_count = 0;
    
    var infeasibility_string = '';
    
    var i = 0;
    var j = 0;
    var k = 0;
    var l = 0;
    var container_index = 0;
       
    var offset = 0;
    var container_name = '';
    var feasibility_flag = false;
       
    var incumbent = new solution_data();
    
    InitializeSolution(incumbent)
    ReadSolution(incumbent)
    
    var volume_capacity_required = 0;
    var volume_capacity_available = 0;

    var weight_capacity_required = 0;
    var weight_capacity_available = 0;

    var area_supported = 0;
    var intersection_right = 0;
    var intersection_left = 0;
    var intersection_top = 0;
    var intersection_bottom = 0;

    var max_width = 0;
    var max_heigth = 0;
    var max_length = 0;
    
    //With item_list
    for( i = 1; i <= item_list.num_item_types; i++){
        if( item_list.item_typesGet(i).mandatory === 1 ){
            volume_capacity_required = volume_capacity_required + (item_list.item_typesGet(i).volume * item_list.item_typesGet(i).number_requested)
            weight_capacity_required = weight_capacity_required + (item_list.item_typesGet(i).weight * item_list.item_typesGet(i).number_requested)
        }
    }
    
    //With container_list
    for( i = 1; i <= container_list.num_container_types; i++){
        if( container_list.container_typesGet(i).mandatory >= 0 ){
            
            volume_capacity_available = volume_capacity_available + (container_list.container_typesGet(i).volume_capacity * container_list.container_typesGet(i).number_available);
            weight_capacity_available = weight_capacity_available + (container_list.container_typesGet(i).weight_capacity * container_list.container_typesGet(i).number_available);
            
            if( container_list.container_typesGet(i).width > max_width ) max_width = container_list.container_typesGet(i).width;
            if( container_list.container_typesGet(i).height > max_heigth ) max_heigth = container_list.container_typesGet(i).height;
            if( container_list.container_typesGet(i).length > max_length ) max_length = container_list.container_typesGet(i).length;
            
        }
    }
    
    if( volume_capacity_required > volume_capacity_available + epsilon ){
        infeasibility_count = infeasibility_count + 1;
        infeasibility_string = infeasibility_string + "The amount of available volume is not enough to pack the mandatory items." + "\n";
        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "The amount of available volume is not enough to pack the mandatory items.";
    }
    
    if( weight_capacity_required > weight_capacity_available + epsilon ){
        infeasibility_count = infeasibility_count + 1;
        infeasibility_string = infeasibility_string + "The amount of available weight capacity is not enough to pack the mandatory items." + "\n";
        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "The amount of available weight capacity is not enough to pack the mandatory items.";
    }
    
    //With item_list
    for( i = 1; i <= item_list.num_item_types; i++){
        //With .item_typesGet(i)
        let itemType = item_list.item_typesGet(i);
        if( (itemType.mandatory === 1) && (itemType.xy_rotatable === false) && (itemType.yz_rotatable === false) && ((itemType.width > max_width + epsilon) || (itemType.height > max_heigth + epsilon) || (itemType.length > max_length + epsilon)) ){
            infeasibility_count = infeasibility_count + 1;
            if( infeasibility_count < 5 ){
                infeasibility_string = infeasibility_string + "Item type " + i + " is too large to fit into any container." + "\n";
            }
            if( infeasibility_count === 5 ){
                infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
            }
            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " + i + " is too large to fit into any container.";
        }

        if( (itemType.mandatory === 1) && (itemType.width > max_width + epsilon) && (itemType.width > max_heigth + epsilon) && (itemType.width > max_length + epsilon) ){
            infeasibility_count = infeasibility_count + 1;
            if( infeasibility_count < 5 ){
                infeasibility_string = infeasibility_string + "Item type " + i + " is too wide to fit into any container." + "\n";
            }
            if( infeasibility_count === 5 ){
                infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
            }
            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " + i + " is too wide to fit into any container.";
        }

        if( (itemType.mandatory === 1) && (itemType.height > max_width + epsilon) && (itemType.height > max_heigth + epsilon) && (itemType.height > max_length + epsilon) ){
            infeasibility_count = infeasibility_count + 1;
            if( infeasibility_count < 5 ){
                infeasibility_string = infeasibility_string + "Item type " + i + " is too tall to fit into any container." + "\n";
            }
            if( infeasibility_count === 5 ){
                infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
            }
            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " + i + " is too tall to fit into any container.";
        }
        
        if( (itemType.mandatory === 1) && (itemType.length > max_width + epsilon) && (itemType.length > max_heigth + epsilon) && (itemType.length > max_length + epsilon) ){
            infeasibility_count = infeasibility_count + 1;
            if( infeasibility_count < 5 ){
                infeasibility_string = infeasibility_string + "Item type " + i + " is too long to fit into any container." + "\n";
            }
            if( infeasibility_count === 5 ){
                infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
            }
            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " + i + " is too long to fit into any container.";
        }
        
    }
    
    offset = 0;
    for( i = 1; i <= container_list.num_container_types; i++){
        for( j = 1; j <= container_list.container_typesGet(i).number_available; j++){
            if( container_list.container_typesGet(i).mandatory === -1 ){
                
                feasibility_flag = true;
                for( k = 1; k <= item_list.total_number_of_items; k++){
                    if( ThisWorkbook.Worksheets("3.Solution").Cells(5 + k, offset + 2) ){
                        feasibility_flag = false;
                        break;
                    }
                }
                
                if( feasibility_flag === false ){
                
                    infeasibility_count = infeasibility_count + 1;
                    if( infeasibility_count < 5 ){
                        infeasibility_string = infeasibility_string + "There are item(s) in the unavailable " + ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1) + "\n";
                    }
                    if( infeasibility_count === 5 ){
                        infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
                    }
                    ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "There are item(s) in the unavailable " + ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1);
                    
                }
            }
            
            offset = offset + 11;
        }
    }
    
    offset = 0;
    container_index = 1;
    for( i = 1; i <= container_list.num_container_types; i++){
    
        for( j = 1; j <= container_list.container_typesGet(i).number_available; j++){
                
            if( container_list.container_typesGet(i).mandatory >= 0 ){

                for( k = 1; k <= incumbent.containerGet(container_index).item_cnt; k++){
                
                    if( ((incumbent.containerGet(container_index).itemsGet(k).rotation === 3) || (incumbent.containerGet(container_index).itemsGet(k).rotation === 4)) && (item_list.item_typesGet(incumbent.containerGet(container_index).itemsGet(k).item_type).xy_rotatable === false) ){

                        container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1).Value;

                        infeasibility_count = infeasibility_count + 1;
                        if( infeasibility_count < 5 ){
                            infeasibility_string = infeasibility_string + "Item " + k + " in " + container_name + " is placed on its xy surface, which is not allowed." + "\n";
                        }
                        if( infeasibility_count === 5 ){
                            infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
                        }
                        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " + k + " in " + container_name + " is placed on its xy surface, which is not allowed.";

                    }
                    
                    if( ((incumbent.containerGet(container_index).itemsGet(k).rotation === 5) || (incumbent.containerGet(container_index).itemsGet(k).rotation === 6)) && (item_list.item_typesGet(incumbent.containerGet(container_index).itemsGet(k).item_type).yz_rotatable === false) ){

                        container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1).Value;

                        infeasibility_count = infeasibility_count + 1;
                        if( infeasibility_count < 5 ){
                            infeasibility_string = infeasibility_string + "Item " + k + " in " + container_name + " is placed on its yz surface, which is not allowed." + "\n";
                        }
                        if( infeasibility_count === 5 ){
                            infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
                        }
                        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " + k + " in " + container_name + " is placed on its yz surface, which is not allowed.";

                    }
                }
                
                container_index = container_index + 1;
            }
            
            offset = offset + 11;
        
        }
        
    }
    
    //With incumbent
    for( i = 1; i <= item_list.num_item_types; i++){
        if( (item_list.item_typesGet(i).mandatory === 1) && (incumbent.unpacked_item_countGet(i) > 0) ){
        
            infeasibility_count = infeasibility_count + 1;
            if( infeasibility_count < 5 ){
                infeasibility_string = infeasibility_string + "There are " + incumbent.unpacked_item_countGet(i) + " item(s) of type " + ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 2) + " that are not packed in the available containers." + "\n";
            }
            if( infeasibility_count === 5 ){
                infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
            }
            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "There are " + incumbent.unpacked_item_countGet(i) + " item(s) of type " + ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 2) + " that are not packed in the available containers.";
            
        }
        
        if( incumbent.unpacked_item_countGet(i) < 0 ){
        
            infeasibility_count = infeasibility_count + 1;
            if( infeasibility_count < 5 ){
                infeasibility_string = infeasibility_string + "Too many item(s) of type " + ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 2) + " are packed." + "\n";
            }
            if( infeasibility_count === 5 ){
                infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
            }
            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Too many item(s) of type " + ThisWorkbook.Worksheets("1.Items").Cells(2 + i, 2) + " are packed.";
            
        }
    }
    
    
    if( instance.container_item_compatibility_worksheet === true ){
    
        for( i = 1; i <= item_list.num_item_types; i++){
            
            feasibility_flag = false;
            
            for( j = 1; j <= container_list.num_container_types; j++){
                if( compatibility_list.container_to_itemGet(j, i) === true ){
                    feasibility_flag = true;
                    break;
                }
            }
            
            if( feasibility_flag === false ){
                
                infeasibility_count = infeasibility_count + 1;
                if( infeasibility_count < 5 ){
                    infeasibility_string = infeasibility_string + "Item type " + i + " is not compatible with any container." + "\n";
                }
                if( infeasibility_count === 5 ){
                    infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
                }
                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item type " + i + " is not compatible with any container.";
            }
            
        }
        
    }
        
    if( instance.item_item_compatibility_worksheet === true ){
    
        offset = 0;
        container_index = 1;
        for( i = 1; i <= container_list.num_container_types; i++){
            for( j = 1; j <= container_list.container_typesGet(i).number_available; j++){
                if( container_list.container_typesGet(i).mandatory >= 0 ){
                    for( k = 1; k <= incumbent.containerGet(container_index).item_cnt; k++){
                        for( l = k + 1; l <= incumbent.containerGet(container_index).item_cnt; l++){
                            if( compatibility_list.item_to_itemGet(incumbent.containerGet(container_index).itemsGet(k).item_type, incumbent.containerGet(container_index).itemsGet(l).item_type) === false ){
                                
                                container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1).Value;
                                
                                infeasibility_count = infeasibility_count + 1;
                                if( infeasibility_count < 5 ){
                                    infeasibility_string = infeasibility_string + "Items " + k + " and " + l + " in " + container_name + " are incompatible." + "\n";
                                }
                                if( infeasibility_count === 5 ){
                                    infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
                                }
                                ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Items " + k + " and " + l + " in " + container_name + " are incompatible.";
                            
                            }
                            
                        }
                    }
                    
                    container_index = container_index + 1;
                }
                
                offset = offset + 11;
            
            }
            
        }
        
    }
    
    
    offset = 0;
    container_index = 1;
    for( i = 1; i <= container_list.num_container_types; i++){
    
        for( j = 1; j <= container_list.container_typesGet(i).number_available; j++){
                
            if( container_list.container_typesGet(i).mandatory >= 0 ){

                //With incumbent.containerGet(container_index)
                let container = incumbent.containerGet(container_index);            
                for( k = 1; k <= incumbent.containerGet(container_index).item_cnt; k++){
                
                    if( (container.itemsGet(k).opposite_x > container_list.container_typesGet(i).width + epsilon) || (container.itemsGet(k).opposite_y > container_list.container_typesGet(i).height + epsilon) || (container.itemsGet(k).opposite_z > container_list.container_typesGet(i).length + epsilon) ){
                        container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1).Value;
                            
                        infeasibility_count = infeasibility_count + 1;
                        if( infeasibility_count < 5 ){
                            infeasibility_string = infeasibility_string + "Item " + k + " in " + container_name + " is out of the bounds of the container." + "\n";
                        }
                        if( infeasibility_count === 5 ){
                            infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
                        }
                        ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " + k + " in " + container_name + " is out of the bounds of the container.";
                    }
                
                    for( l = k + 1; l <= incumbent.containerGet(container_index).item_cnt; l++){
                            
                        if( (container.itemsGet(k).opposite_x < container.itemsGet(l).origin_x + epsilon) ||
                            (container.itemsGet(l).opposite_x < container.itemsGet(k).origin_x + epsilon) ||
                            (container.itemsGet(k).opposite_y < container.itemsGet(l).origin_y + epsilon) ||
                            (container.itemsGet(l).opposite_y < container.itemsGet(k).origin_y + epsilon) ||
                            (container.itemsGet(k).opposite_z < container.itemsGet(l).origin_z + epsilon) ||
                            (container.itemsGet(l).opposite_z < container.itemsGet(k).origin_z + epsilon) ){
                            // no conflict
                        } else {
                            // conflict
                                                        
                            container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1).Value;
                            
                            infeasibility_count = infeasibility_count + 1;
                            if( infeasibility_count < 5 ){
                                infeasibility_string = infeasibility_string + "Items " + k + " and " + l + " in " + container_name + " are overlapping." + "\n";
                            }
                            if( infeasibility_count === 5 ){
                                infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
                            }
                            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Items " + k + " and " + l + " in " + container_name + " are overlapping.";
                        }
                        
                    }
                }

                container_index = container_index + 1;
            }
            
            offset = offset + 11;
        
        }
        
    }
    
    // support
    
    offset = 0;
    container_index = 1;
    for( i = 1; i <= container_list.num_container_types; i++){
    
        for( j = 1; j <= container_list.container_typesGet(i).number_available; j++){
                
            if( container_list.container_typesGet(i).mandatory >= 0 ){

                //With incumbent.containerGet(container_index)
                let container = incumbent.containerGet(container_index);
            
                for( k = 1; k <= incumbent.containerGet(container_index).item_cnt; k++){
                    
                    if( container.itemsGet(k).origin_y < epsilon ){
                        // supported by the floor
                    } else {
                        area_supported = 0;
                        for( l = 1; l <= incumbent.containerGet(container_index).item_cnt; l++){
                            
                            if( (Math.abs(container.itemsGet(k).origin_y - container.itemsGet(l).opposite_y) < epsilon) ){
                                
                                // check for intersection
                                
                                intersection_right = container.itemsGet(k).opposite_x;
                                if( intersection_right > container.itemsGet(l).opposite_x ) intersection_right = container.itemsGet(l).opposite_x;
                                
                                intersection_left = container.itemsGet(k).origin_x;
                                if( intersection_left < container.itemsGet(l).origin_x ) intersection_left = container.itemsGet(l).origin_x;
                                
                                intersection_top = container.itemsGet(k).opposite_z;
                                if( intersection_top > container.itemsGet(l).opposite_z ) intersection_top = container.itemsGet(l).opposite_z;
                                
                                intersection_bottom = container.itemsGet(k).origin_z;
                                if( intersection_bottom < container.itemsGet(l).origin_z ) intersection_bottom = container.itemsGet(l).origin_z;
                                
                                if( (intersection_right > intersection_left) && (intersection_top > intersection_bottom) ){
                                    area_supported = area_supported + (intersection_right - intersection_left) * (intersection_top - intersection_bottom);
                                }
                            }
                        }
                        
                        if( area_supported < (container.itemsGet(k).opposite_x - container.itemsGet(k).origin_x) * (container.itemsGet(k).opposite_z - container.itemsGet(k).origin_z) - epsilon ){
                            
                            // infeasible
                            
                            container_name = ThisWorkbook.Worksheets("3.Solution").Cells(3, offset + 1).Value;
                            
                            infeasibility_count = infeasibility_count + 1;
                            if( infeasibility_count < 5 ){
                                infeasibility_string = infeasibility_string + "Item " + k + " in " + container_name + " is not supported. " + area_supported + " " + (container.itemsGet(k).opposite_x - container.itemsGet(k).origin_x) * (container.itemsGet(k).opposite_z - container.itemsGet(k).origin_z) + "\n";
                            }
                            if( infeasibility_count === 5 ){
                                infeasibility_string = infeasibility_string + "More can be found in the list of detected infeasibilities in the solution worksheet." + "\n";
                            }
                            ThisWorkbook.Worksheets("3.Solution").Cells(item_list.total_number_of_items + 8 + infeasibility_count, 1).Value = "Item " + k + " in " + container_name + " is not supported.";
                            
                        }
                        
                    }
                    
                }
                                        
                container_index = container_index + 1;
            }
            
            offset = offset + 11;
        
        }
        
    }
            
    if( infeasibility_count > 0 ){
        Cells(2, 1).Value = "Warning: Last infeasibility check found problems with the solution.";
        //Range(Cells(2, 1), Cells(2, 10)).Interior.ColorIndex = 45
        //Range(Cells(2, 1), Cells(2, 10)).Font.Bold = true
        infeasibility_string = infeasibility_string + "The solution is infeasible.";
        alert(infeasibility_string);
        Cells(7 + item_list.total_number_of_items, 1).Select;
    } else {
        alert("The solution is feasible.");
        Cells(1, 1).Select;
    }
    
    //Application.ScreenUpdating = true
    //Application.Calculation = xlCalculationAutomatic

}
*/